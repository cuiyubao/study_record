package com.study.sort;

/**选择排序
 *
 * 以下为简单选择排序的存储状态，其中大括号内为无序区，大括号外为有序序列：
 * 初始序列：{49 27 65 97 76 12 38}
 * 　　第1趟：12与49交换：12{27 65 97 76 49 38}
 * 　　第2趟：27不动　：12 27{65 97 76 49 38}
 * 　　第3趟：65与38交换：12 27 38{97 76 49 65}
 * 　　第4趟：97与49交换：12 27 38 49{76 97 65}
 * 　　第5趟：76与65交换：12 27 38 49 65{97 76}
 * 　　第6趟：97与76交换：12 27 38 49 65 76 97 完成
 *==============================
 * 数组 int[] arr={5,2,8,4,9,1};
 *
 * -------------------------------------------------------
 *
 * 第一趟排序： 原始数据：5  2  8  4  9  1
 *
 * 最小数据1，把1放在首位，也就是1和5互换位置，
 *
 * 排序结果：1  2  8  4  9  5
 *
 * -------------------------------------------------------
 *
 * 第二趟排序：
 *
 * 第1以外的数据{2  8  4  9  5}进行比较，2最小，
 *
 * 排序结果：1  2  8  4  9  5
 *
 * -------------------------------------------------------
 *
 * 第三趟排序：
 *
 * 除1、2以外的数据{8  4  9  5}进行比较，4最小，8和4交换
 *
 * 排序结果：1  2  4  8  9  5
 *
 * -------------------------------------------------------
 *
 * 第四趟排序：
 *
 * 除第1、2、4以外的其他数据{8  9  5}进行比较，5最小，8和5交换
 *
 * 排序结果：1  2  4  5  9  8
 *
 * -------------------------------------------------------
 *
 * 第五趟排序：
 *
 * 除第1、2、4、5以外的其他数据{9  8}进行比较，8最小，8和9交换
 *
 * 排序结果：1  2  4  5  8  9
 *
 *
 *
 * User: cuiyubao
 * Date: 2019/5/8
 * Time: 下午 11:50
 */
public class SelectionSort {
    public static void main(String[] args){
        System.out.println(selectionSort(new int[]{-10,4,3,2,5,7,4,3,2,1,-90}));
    }

    /**
     * 选择排序
     * @param arr
     * @return
     */
     public static int[] selectionSort(int[] arr){
         // 总共要经过 N-1 轮比较
         for (int i = 0; i < arr.length - 1; i++) {
             int min = i;

             // 每轮需要比较的次数 N-i
             for (int j = i + 1; j < arr.length; j++) {
                 if (arr[j] < arr[min]) {
                     // 记录目前能找到的最小值元素的下标
                     min = j;
                 }
             }

             // 将找到的最小值和i位置所在的值进行交换
             if (i != min) {
                 int tmp = arr[i];
                 arr[i] = arr[min];
                 arr[min] = tmp;
             }
         }
        return arr;
    }



}
